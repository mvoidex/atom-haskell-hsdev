"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const Temp = require("temp");
const FS = require("fs");
const CP = require("child_process");
const os_1 = require("os");
const atom_haskell_utils_1 = require("atom-haskell-utils");
exports.getRootDirFallback = atom_haskell_utils_1.getRootDirFallback;
exports.getRootDir = atom_haskell_utils_1.getRootDir;
exports.isDirectory = atom_haskell_utils_1.isDirectory;
let debuglog = [];
const logKeep = 30000;
function savelog(...messages) {
    const ts = Date.now();
    debuglog.push({
        timestamp: ts,
        messages,
    });
    let ks = 0;
    for (const v of debuglog) {
        if ((ts - v.timestamp) >= logKeep) {
            break;
        }
        ks++;
    }
    debuglog.splice(0, ks);
}
function joinPath(ds) {
    const set = new Set(ds);
    return Array.from(set).join(path_1.delimiter);
}
exports.EOT = `${os_1.EOL}\x04${os_1.EOL}`;
function debug(...messages) {
    if (atom.config.get('atom-haskell-hsdev.debug')) {
        console.log('atom-haskell-hsdev debug:', ...messages);
    }
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.debug = debug;
function warn(...messages) {
    console.warn('atom-haskell-hsdev warning:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.warn = warn;
function error(...messages) {
    console.error('atom-haskell-hsdev error:', ...messages);
    savelog(...messages.map((v) => JSON.stringify(v)));
}
exports.error = error;
function getDebugLog() {
    const ts = Date.now();
    debuglog = debuglog.filter(({ timestamp }) => (ts - timestamp) < logKeep);
    return debuglog.map(({ timestamp, messages }) => `${(timestamp - ts) / 1000}s: ${messages.join(',')}`).join(os_1.EOL);
}
exports.getDebugLog = getDebugLog;
async function execPromise(cmd, args, opts, stdin) {
    return new Promise((resolve, reject) => {
        debug(`Running ${cmd} ${args} with opts = `, opts);
        const child = CP.execFile(cmd, args, opts, (error, stdout, stderr) => {
            if (stderr.trim().length > 0) {
                warn(stderr);
            }
            if (error) {
                warn(`Running ${cmd} ${args} failed with `, error);
                if (stdout) {
                    warn(stdout);
                }
                error.stack = (new Error()).stack;
                reject(error);
            }
            else {
                debug(`Got response from ${cmd} ${args}`, { stdout, stderr });
                resolve({ stdout, stderr });
            }
        });
        if (stdin) {
            debug(`sending stdin text to ${cmd} ${args}`);
            child.stdin.write(stdin);
        }
    });
}
exports.execPromise = execPromise;
async function getCabalSandbox(rootPath) {
    debug('Looking for cabal sandbox...');
    const sbc = await parseSandboxConfig(`${rootPath}${path_1.sep}cabal.sandbox.config`);
    if (sbc && sbc['install-dirs'] && sbc['install-dirs']['bindir']) {
        const sandbox = sbc['install-dirs']['bindir'];
        debug('Found cabal sandbox: ', sandbox);
        if (atom_haskell_utils_1.isDirectory(sandbox)) {
            return sandbox;
        }
        else {
            warn('Cabal sandbox ', sandbox, ' is not a directory');
            return undefined;
        }
    }
    else {
        warn('No cabal sandbox found');
        return undefined;
    }
}
exports.getCabalSandbox = getCabalSandbox;
async function getStackSandbox(rootPath, apd, env) {
    debug('Looking for stack sandbox...');
    env.PATH = joinPath(apd);
    debug('Running stack with PATH ', env.PATH);
    try {
        const out = await execPromise('stack', ['path', '--snapshot-install-root', '--local-install-root', '--bin-path'], {
            encoding: 'utf8',
            cwd: rootPath,
            env,
            timeout: atom.config.get('atom-haskell-hsdev.initTimeout') * 1000,
        });
        const lines = out.stdout.split(os_1.EOL);
        const sir = lines.filter((l) => l.startsWith('snapshot-install-root: '))[0].slice(23) + `${path_1.sep}bin`;
        const lir = lines.filter((l) => l.startsWith('local-install-root: '))[0].slice(20) + `${path_1.sep}bin`;
        const bp = lines.filter((l) => l.startsWith('bin-path: '))[0].slice(10).split(path_1.delimiter).filter((p) => !((p === sir) || (p === lir) || (apd.includes(p))));
        debug('Found stack sandbox ', lir, sir, ...bp);
        return [lir, sir, ...bp];
    }
    catch (err) {
        warn('No stack sandbox found because ', err);
        return undefined;
    }
}
exports.getStackSandbox = getStackSandbox;
async function getProcessOptions(rootPath) {
    if (!rootPath) {
        rootPath = atom_haskell_utils_1.getRootDirFallback(null).getPath();
    }
    const res = {};
    return res;
}
exports.getProcessOptions = getProcessOptions;
function getSymbolAtPoint(editor, point) {
    const [scope] = editor.scopeDescriptorForBufferPosition(point).getScopesArray().slice(-1);
    if (scope) {
        const range = editor.bufferRangeForScopeAtPosition(scope, point);
        if (range && !range.isEmpty()) {
            const symbol = editor.getTextInBufferRange(range);
            return { scope, range, symbol };
        }
    }
    return undefined;
}
exports.getSymbolAtPoint = getSymbolAtPoint;
function getSymbolInRange(editor, crange) {
    const buffer = editor.getBuffer();
    if (crange.isEmpty()) {
        return getSymbolAtPoint(editor, crange.start);
    }
    else {
        return {
            symbol: buffer.getTextInRange(crange),
            range: crange,
        };
    }
}
exports.getSymbolInRange = getSymbolInRange;
async function withTempFile(contents, uri, gen) {
    const info = await new Promise((resolve, reject) => Temp.open({ prefix: 'atom-haskell-hsdev', suffix: path_1.extname(uri || '.hs') }, (err, info2) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(info2);
        }
    }));
    return new Promise((resolve, reject) => FS.write(info.fd, contents, async (err) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(await gen(info.path));
            FS.close(info.fd, () => FS.unlink(info.path, () => { }));
        }
    }));
}
exports.withTempFile = withTempFile;
function mkError(name, message) {
    const err = new Error(message);
    err.name = name;
    return err;
}
exports.mkError = mkError;
async function parseSandboxConfig(file) {
    try {
        const sbc = await new Promise((resolve, reject) => FS.readFile(file, { encoding: 'utf-8' }, (err, sbc2) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(sbc2);
            }
        }));
        const vars = {};
        let scope = vars;
        const rv = (v) => {
            for (const k1 of Object.keys(scope)) {
                const v1 = scope[k1];
                if (typeof v1 === 'string') {
                    v = v.split(`$${k1}`).join(v1);
                }
            }
            return v;
        };
        for (const line of sbc.split(/\r?\n|\r/)) {
            if (!line.match(/^\s*--/) && !line.match(/^\s*$/)) {
                const [l] = line.split(/--/);
                const m = l.match(/^\s*([\w-]+):\s*(.*)\s*$/);
                if (m) {
                    const [, name, val] = m;
                    scope[name] = rv(val);
                }
                else {
                    const newscope = {};
                    scope[line] = newscope;
                    scope = newscope;
                }
            }
        }
        return vars;
    }
    catch (err) {
        warn('Reading cabal sandbox config failed with ', err);
        return undefined;
    }
}
exports.parseSandboxConfig = parseSandboxConfig;
function isUpperCase(ch) {
    return ch.toUpperCase() === ch;
}
exports.isUpperCase = isUpperCase;
function getErrorDetail({ err, runArgs }) {
    return `Args:
${JSON.stringify(runArgs, undefined, 2)}
message:
${err.message}
log:
${getDebugLog()}`;
}
exports.getErrorDetail = getErrorDetail;
function formatError({ err, runArgs }) {
    if (err.name === 'InteractiveActionTimeout' && runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
timed out. You can try to fix it by raising 'Interactive Action \
Timeout' setting in atom-haskell-hsdev settings.`;
    }
    else if (runArgs) {
        return `\
Haskell-ghc-mod: ghc-mod \
${runArgs.interactive ? 'interactive ' : ''}command ${runArgs.command} \
failed with error ${err.name}`;
    }
    else {
        return `There was an unexpected error ${err.name}`;
    }
}
exports.formatError = formatError;
function defaultErrorHandler(args) {
    const { err, runArgs } = args;
    const suppressErrors = runArgs && runArgs.suppressErrors;
    if (!suppressErrors) {
        atom.notifications.addError(formatError(args), {
            detail: getErrorDetail(args),
            stack: err.stack,
            dismissable: true,
        });
    }
    else {
        error(runArgs, err);
    }
}
exports.defaultErrorHandler = defaultErrorHandler;
function warnGHCPackagePath() {
    atom.notifications.addWarning('atom-haskell-hsdev: You have GHC_PACKAGE_PATH environment variable set!', {
        dismissable: true,
        detail: `\
This configuration is not supported, and can break arbitrarily. You can try to band-aid it by adding

delete process.env.GHC_PACKAGE_PATH

to your Atom init script (Edit â†’ Init Script...)

You can suppress this warning in atom-haskell-hsdev settings.`,
    });
}
exports.warnGHCPackagePath = warnGHCPackagePath;
function filterEnv(env) {
    const fenv = {};
    for (const evar in env) {
        const evarU = evar.toUpperCase();
        if (evarU === 'PATH'
            || evarU.startsWith('GHC_')
            || evarU.startsWith('STACK_')
            || evarU.startsWith('CABAL_')) {
            fenv[evar] = env[evar];
        }
    }
    return fenv;
}
function notifySpawnFail(args) {
    const debugInfo = Object.assign({}, args);
    if (args.opts) {
        const optsclone = Object.assign({}, args.opts);
        debugInfo.opts = optsclone;
    }
    atom.notifications.addFatalError(`Haskell-ghc-mod: ghc-mod failed to launch.
It is probably missing or misconfigured. ${args.err.code}`, {
        detail: `\
Error was: ${debugInfo.err.name}
${debugInfo.err.message}
Debug information:
${JSON.stringify(debugInfo, undefined, 2)}
Config:
${JSON.stringify(atom.config.get('atom-haskell-hsdev'), undefined, 2)}
`,
        stack: debugInfo.err.stack,
        dismissable: true,
    });
}
exports.notifySpawnFail = notifySpawnFail;
function handleException(_target, _key, desc) {
    return Object.assign({}, desc, { async value(...args) {
            try {
                return await desc.value.call(this, ...args);
            }
            catch (e) {
                debug(e);
                const upi = await this.upi;
                upi.setStatus({
                    status: 'warning',
                    detail: e.toString(),
                });
                return new Promise(() => { });
            }
        } });
}
exports.handleException = handleException;
function versAtLeast(vers, b) {
    for (let i = 0; i < b.length; i++) {
        const v = b[i];
        const t = vers[i];
        const vv = t !== undefined ? t : 0;
        if (vv > v) {
            return true;
        }
        else if (vv < v) {
            return false;
        }
    }
    return true;
}
exports.versAtLeast = versAtLeast;
//# sourceMappingURL=data:application/json;base64,