"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const FZ = require("fuzzaldrin");
const atom_1 = require("atom");
const buffer_info_1 = require("./buffer-info");
const Util = require("../util");
const { handleException } = Util;
class CompletionBackend {
    constructor(process, upi) {
        this.process = process;
        this.upi = upi;
        this.bufferMap = new WeakMap();
        this.name = this.name.bind(this);
        this.onDidDestroy = this.onDidDestroy.bind(this);
        this.registerCompletionBuffer = this.registerCompletionBuffer.bind(this);
        this.unregisterCompletionBuffer = this.unregisterCompletionBuffer.bind(this);
        this.getCompletionsForSymbol = this.getCompletionsForSymbol.bind(this);
        this.getCompletionsForType = this.getCompletionsForType.bind(this);
        this.getCompletionsForClass = this.getCompletionsForClass.bind(this);
        this.getCompletionsForModule = this.getCompletionsForModule.bind(this);
        this.getCompletionsForSymbolInModule = this.getCompletionsForSymbolInModule.bind(this);
        this.getCompletionsForLanguagePragmas = this.getCompletionsForLanguagePragmas.bind(this);
        this.getCompletionsForCompilerOptions = this.getCompletionsForCompilerOptions.bind(this);
        this.getCompletionsForHole = this.getCompletionsForHole.bind(this);
        this.process = process;
        this.isActive = true;
        this.process.onDidDestroy(() => { this.isActive = false; });
    }
    name() { return 'atom-haskell-hsdev'; }
    onDidDestroy(callback) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        return this.process.onDidDestroy(callback);
    }
    registerCompletionBuffer(buffer) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        if (this.bufferMap.has(buffer)) {
            return new atom_1.Disposable(() => { });
        }
        this.bufferMap.set(buffer, new buffer_info_1.BufferInfo(buffer));
        const file = buffer.getUri();
        buffer.onDidSave(async (_event) => {
            const buf = this.bufferMap.get(buffer);
            if (buf) {
                delete buf.completions;
            }
            const contents = buffer.getText();
            await this.process.backend.setFileContents(file, contents);
            await this.process.backend.scanFile({ file, scanProject: false, scanDeps: false });
        });
        setImmediate(async () => {
            this.process.backend.scanFile({ file });
        });
        return new atom_1.Disposable(() => this.unregisterCompletionBuffer(buffer));
    }
    unregisterCompletionBuffer(buffer) {
        const x = this.bufferMap.get(buffer);
        if (x) {
            x.destroy();
        }
    }
    async getCompletionsForSymbol(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getCompletionsForBuffer(buffer);
        return this.filter(symbols, prefix, ['qname', 'qparent']);
    }
    async getCompletionsForType(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getCompletionsForBuffer(buffer, ['type', 'class']);
        return FZ.filter(symbols, prefix, { key: 'qname' });
    }
    async getCompletionsForClass(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const symbols = await this.getCompletionsForBuffer(buffer, ['class']);
        return FZ.filter(symbols, prefix, { key: 'qname' });
    }
    async getCompletionsForModule(buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const modules = await this.process.backend.scopeModules({
            query: prefix,
            searchType: 'prefix',
            file: buffer.getUri(),
        });
        const parts = prefix.split('.').length;
        const names = [];
        for (const m of modules) {
            if (m.name.split('.').length == parts) {
                names.push(m.name);
            }
        }
        return names;
    }
    async getCompletionsForSymbolInModule(buffer, prefix, position, opts) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        let moduleName = opts ? opts.module : undefined;
        if (!moduleName) {
            const lineRange = new atom_1.Range([0, position.row], position);
            buffer.backwardsScanInRange(/^import\s+([\w.]+)/, lineRange, ({ match }) => moduleName = match[1]);
        }
        return [];
    }
    async getCompletionsForLanguagePragmas(_buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const ps = await this.process.backend.langs();
        return FZ.filter(ps, prefix);
    }
    async getCompletionsForCompilerOptions(_buffer, prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        const co = await this.process.backend.flags();
        return FZ.filter(co, prefix);
    }
    async getCompletionsForHole(_buffer, _prefix, _position) {
        if (!this.isActive) {
            throw new Error('Backend inactive');
        }
        return [];
    }
    async getCompletionsForBuffer(buffer, symbolTypes) {
        let symbols = [];
        const buf = this.bufferMap.get(buffer);
        if (buf && buf.completions) {
            symbols = buf.completions;
        }
        else {
            const comps = await this.process.backend.complete('', buffer.getUri());
            for (const comp of comps) {
                let symType = 'function';
                switch (comp.info.what) {
                    case 'function':
                    case 'method':
                    case 'selector':
                    case 'pat-selector':
                    case 'pat-constructor':
                    case 'constructor':
                        symType = 'function';
                        break;
                    case 'type':
                    case 'newtype':
                    case 'data':
                    case 'type-family':
                    case 'data-family':
                        symType = 'type';
                        break;
                    case 'class':
                        symType = 'class';
                        break;
                    default:
                        break;
                }
                if (symbolTypes && !(symType in symbolTypes)) {
                    continue;
                }
                symbols.push({
                    qparent: comp.qualifier,
                    qname: comp.qualifier ? `${comp.qualifier}.${comp.id.name}` : comp.id.name,
                    name: comp.id.name,
                    symbolType: symType,
                    typeSignature: comp.info.type,
                    module: {
                        name: comp.id.module.name,
                        hiding: false,
                        qualified: false,
                        alias: null,
                        importList: null,
                    }
                });
            }
            if (buf) {
                Util.debug(`Caching ${symbols.length} completions`);
                buf.completions = symbols;
            }
        }
        if (!symbolTypes) {
            return symbols;
        }
        const result = [];
        for (const sym of symbols) {
            if (sym.symbolType in symbolTypes) {
                result.push(sym);
            }
        }
        return result;
    }
    filter(candidates, prefix, keys) {
        if (!prefix) {
            return candidates;
        }
        const list = [];
        for (const candidate of candidates) {
            const scores = keys.map((key) => {
                const ck = candidate[key];
                if (ck) {
                    return FZ.score(ck.toString(), prefix);
                }
                else {
                    return 0;
                }
            });
            const score = Math.max(...scores);
            if (score > 0) {
                list.push({
                    score,
                    scoreN: scores.indexOf(score),
                    data: candidate,
                });
            }
        }
        return list.sort((a, b) => {
            const s = b.score - a.score;
            if (s === 0) {
                return a.scoreN - b.scoreN;
            }
            return s;
        }).map(({ data }) => data);
    }
}
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof atom_1.TextBuffer !== "undefined" && atom_1.TextBuffer) === "function" && _a || Object, String, typeof (_b = typeof atom_1.Point !== "undefined" && atom_1.Point) === "function" && _b || Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForSymbol", null);
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof atom_1.TextBuffer !== "undefined" && atom_1.TextBuffer) === "function" && _c || Object, String, typeof (_d = typeof atom_1.Point !== "undefined" && atom_1.Point) === "function" && _d || Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForType", null);
tslib_1.__decorate([
    handleException,
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof atom_1.TextBuffer !== "undefined" && atom_1.TextBuffer) === "function" && _e || Object, String, typeof (_f = typeof atom_1.Point !== "undefined" && atom_1.Point) === "function" && _f || Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CompletionBackend.prototype, "getCompletionsForHole", null);
exports.CompletionBackend = CompletionBackend;
var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=data:application/json;base64,