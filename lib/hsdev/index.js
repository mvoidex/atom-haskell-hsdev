"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const Util = require("../util");
const hsdev_process_real_1 = require("./hsdev-process-real");
const hsdev_process_real_factory_1 = require("./hsdev-process-real-factory");
class HsDevProcess {
    constructor(upiPromise) {
        this.upiPromise = upiPromise;
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
        this.bufferDirMap = new WeakMap();
        this.backend = this.startBackend();
    }
    async getRootDir(buffer) {
        let dir;
        dir = this.bufferDirMap.get(buffer);
        if (dir) {
            return dir;
        }
        dir = await Util.getRootDir(buffer);
        this.bufferDirMap.set(buffer, dir);
        return dir;
    }
    killProcess() {
        this.backend.killProcess();
    }
    destroy() {
        this.backend.destroy();
        this.emitter.emit('did-destroy');
        this.disposables.dispose();
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onWarning(callback) {
        return this.emitter.on('warning', callback);
    }
    onError(callback) {
        return this.emitter.on('error', callback);
    }
    onBackendActive(callback) {
        return this.emitter.on('backend-active', callback);
    }
    onBackendIdle(callback) {
        return this.emitter.on('backend-idle', callback);
    }
    onQueueIdle(callback) {
        return this.emitter.on('queue-idle', callback);
    }
    async whoat(buffer, crange) {
        const file = buffer.getUri();
        const line = crange.start.row + 1;
        const column = crange.start.column + 1;
        const symbols = await this.backend.whoat(file, line, column);
        if (symbols.length == 0) {
            Util.debug(`No info found for symbol at ${file} ${line} ${column}`);
            throw Error(`No info found for symbol at ${file} ${line} ${column}`);
        }
        else {
            const sym = symbols[0];
            const what = sym.info.what;
            const lines = [];
            switch (what) {
                case 'function':
                case 'method':
                case 'constructor':
                    lines.push(`${sym.id.name} :: ${sym.info.type ? sym.info.type : '?'}`);
                    break;
                case 'data':
                case 'type':
                case 'class':
                case 'newtype':
                    lines.push(`${what} ${sym.id.name}`);
                    break;
                default:
                    lines.push(`${sym.id.name}`);
            }
            if (sym.docs) {
                lines.push('', `{- ${sym.docs} -}`);
            }
            if (sym.id.module.location.file && sym.pos) {
                lines.push('', `-- Defined in ${sym.id.module.location.file}:${sym.pos.line}:${sym.pos.column}`);
            }
            return { range: crange, info: lines.join('\n') };
        }
    }
    async doPing() {
        this.backend.call('ping', undefined, {
            onResponse: (response) => {
                Util.debug(`response to ping: ${JSON.stringify(response)}`);
            }
        });
    }
    async getUPI() {
        return Promise.race([this.upiPromise, Promise.resolve(undefined)]);
    }
    startBackend() {
        const backend = new hsdev_process_real_1.HsDevProcessReal();
        backend.scanCabal({
            onNotify: async (_notification) => {
                const upi = await this.getUPI();
                if (upi) {
                    upi.setStatus({
                        status: 'progress',
                        detail: 'scanning global-db/user-db'
                    });
                }
            },
            onError: async (error, _details) => {
                const upi = await this.getUPI();
                if (upi) {
                    upi.setStatus({
                        status: 'error',
                        detail: `scanning global-db/user-db failed: ${error}`
                    });
                }
            },
            onResponse: async (_response) => {
                const upi = await this.getUPI();
                if (upi) {
                    upi.setStatus({
                        status: 'ready',
                        detail: 'scanned global-db/user-db'
                    });
                }
            }
        });
        return backend;
    }
    async initBackend() {
        if (!this.backend) {
            this.backend = await this.createBackend();
        }
        return this.backend;
    }
    async createBackend() {
        const backend = await hsdev_process_real_factory_1.createHsDevProcessReal();
        this.disposables.add(backend.onError((arg) => this.emitter.emit('error', arg)), backend.onWarning((arg) => this.emitter.emit('warning', arg)));
        return backend;
    }
}
exports.HsDevProcess = HsDevProcess;
//# sourceMappingURL=data:application/json;base64,