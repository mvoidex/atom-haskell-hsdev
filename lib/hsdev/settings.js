"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const Util = require("../util");
async function getSettings(runDir) {
    const localSettings = readSettings(runDir.getFile('.atom-haskell-hsdev.json'));
    const [projectDir] = atom.project.getDirectories().filter((d) => d.contains(runDir.getPath()));
    const projectSettings = projectDir ?
        readSettings(projectDir.getFile('.atom-haskell-hsdev.json'))
        :
            Promise.resolve({});
    const configDir = new atom_1.Directory(atom.getConfigDirPath());
    const globalSettings = readSettings(configDir.getFile('atom-haskell-hsdev.json'));
    const [glob, prj, loc] = await Promise.all([globalSettings, projectSettings, localSettings]);
    return Object.assign({}, glob, prj, loc);
}
exports.getSettings = getSettings;
async function readSettings(file) {
    try {
        const ex = await file.exists();
        if (ex) {
            const contents = await file.read();
            try {
                return JSON.parse(contents);
            }
            catch (err) {
                atom.notifications.addError(`Failed to parse ${file.getPath()}`, {
                    detail: err,
                    dismissable: true,
                });
                throw err;
            }
        }
        else {
            return {};
        }
    }
    catch (error) {
        if (error) {
            Util.warn(error);
        }
        return {};
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHNkZXYvc2V0dGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBc0M7QUFDdEMsZ0NBQStCO0FBU3hCLEtBQUssc0JBQXNCLE1BQWlCO0lBQ2pELE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQTtJQUU5RSxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM5RixNQUFNLGVBQWUsR0FDbkIsVUFBVSxDQUFDLENBQUM7UUFDVixZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzVELENBQUM7WUFDRCxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBRXZCLE1BQU0sU0FBUyxHQUFHLElBQUksZ0JBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFBO0lBQ3hELE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQTtJQUVqRixNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUE7SUFDNUYsTUFBTSxtQkFBTSxJQUFJLEVBQUssR0FBRyxFQUFLLEdBQUcsRUFBRTtBQUNwQyxDQUFDO0FBZkQsa0NBZUM7QUFFRCxLQUFLLHVCQUF1QixJQUFVO0lBQ3BDLElBQUksQ0FBQztRQUNILE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDUCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUNsQyxJQUFJLENBQUM7Z0JBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDN0IsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFO29CQUMvRCxNQUFNLEVBQUUsR0FBRztvQkFDWCxXQUFXLEVBQUUsSUFBSTtpQkFDbEIsQ0FBQyxDQUFBO2dCQUNGLE1BQU0sR0FBRyxDQUFBO1lBQ1gsQ0FBQztRQUNILENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxFQUFFLENBQUE7UUFDWCxDQUFDO0lBQ0gsQ0FBQztJQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLEVBQUUsQ0FBQTtJQUNYLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZSwgRGlyZWN0b3J5IH0gZnJvbSAnYXRvbSdcclxuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIc0RldlNldHRpbmdzIHtcclxuICBkaXNhYmxlPzogYm9vbGVhblxyXG4gIHN1cHByZXNzRXJyb3JzPzogYm9vbGVhblxyXG4gIGdoY09wdGlvbnM/OiBzdHJpbmdbXVxyXG4gIGdoY01vZE9wdGlvbnM/OiBzdHJpbmdbXVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U2V0dGluZ3MocnVuRGlyOiBEaXJlY3RvcnkpOiBQcm9taXNlPEhzRGV2U2V0dGluZ3M+IHtcclxuICBjb25zdCBsb2NhbFNldHRpbmdzID0gcmVhZFNldHRpbmdzKHJ1bkRpci5nZXRGaWxlKCcuYXRvbS1oYXNrZWxsLWhzZGV2Lmpzb24nKSlcclxuXHJcbiAgY29uc3QgW3Byb2plY3REaXJdID0gYXRvbS5wcm9qZWN0LmdldERpcmVjdG9yaWVzKCkuZmlsdGVyKChkKSA9PiBkLmNvbnRhaW5zKHJ1bkRpci5nZXRQYXRoKCkpKVxyXG4gIGNvbnN0IHByb2plY3RTZXR0aW5ncyA9XHJcbiAgICBwcm9qZWN0RGlyID9cclxuICAgICAgcmVhZFNldHRpbmdzKHByb2plY3REaXIuZ2V0RmlsZSgnLmF0b20taGFza2VsbC1oc2Rldi5qc29uJykpXHJcbiAgICAgIDpcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHt9KVxyXG5cclxuICBjb25zdCBjb25maWdEaXIgPSBuZXcgRGlyZWN0b3J5KGF0b20uZ2V0Q29uZmlnRGlyUGF0aCgpKVxyXG4gIGNvbnN0IGdsb2JhbFNldHRpbmdzID0gcmVhZFNldHRpbmdzKGNvbmZpZ0Rpci5nZXRGaWxlKCdhdG9tLWhhc2tlbGwtaHNkZXYuanNvbicpKVxyXG5cclxuICBjb25zdCBbZ2xvYiwgcHJqLCBsb2NdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2dsb2JhbFNldHRpbmdzLCBwcm9qZWN0U2V0dGluZ3MsIGxvY2FsU2V0dGluZ3NdKVxyXG4gIHJldHVybiB7IC4uLmdsb2IsIC4uLnByaiwgLi4ubG9jIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcmVhZFNldHRpbmdzKGZpbGU6IEZpbGUpOiBQcm9taXNlPEhzRGV2U2V0dGluZ3M+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgZXggPSBhd2FpdCBmaWxlLmV4aXN0cygpXHJcbiAgICBpZiAoZXgpIHtcclxuICAgICAgY29uc3QgY29udGVudHMgPSBhd2FpdCBmaWxlLnJlYWQoKVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudHMpXHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihgRmFpbGVkIHRvIHBhcnNlICR7ZmlsZS5nZXRQYXRoKCl9YCwge1xyXG4gICAgICAgICAgZGV0YWlsOiBlcnIsXHJcbiAgICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRocm93IGVyclxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4ge31cclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgaWYgKGVycm9yKSB7IFV0aWwud2FybihlcnJvcikgfVxyXG4gICAgcmV0dXJuIHt9XHJcbiAgfVxyXG59XHJcbiJdfQ==