"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const interactive_process_1 = require("./interactive-process");
const Util = require("../util");
const { debug, withTempFile, EOT } = Util;
const net = require("net");
class HsDevProcessReal {
    constructor(options = {}) {
        this.options = options;
        this.buffer = '';
        this.id = 0;
        this.callbacks = {};
        this.disposables = new atom_1.CompositeDisposable();
        this.emitter = new atom_1.Emitter();
        this.disposables.add(this.emitter);
    }
    async run(runArgs) {
        const { command } = runArgs;
        try {
            this.call(command);
        }
        catch (err) {
            debug(err);
            this.emitter.emit('error', { runArgs, err });
        }
    }
    killProcess() {
        debug(`Killing hsdev process`);
        this.proc && this.proc.kill();
    }
    destroy() {
        debug('HsDevProcessBase destroying');
        this.killProcess();
        this.emitter.emit('did-destroy');
        this.disposables.dispose();
    }
    onDidDestroy(callback) {
        return this.emitter.on('did-destroy', callback);
    }
    onWarning(callback) {
        return this.emitter.on('warning', callback);
    }
    onError(callback) {
        return this.emitter.on('error', callback);
    }
    async startServer() {
        debug(`Checking for hsdev`);
        if (this.proc) {
            debug(`Found running hsdev instance`);
            return this.proc;
        }
        debug(`Spawning new hsdev instance for with`, this.options);
        const modPath = atom.config.get('atom-haskell-hsdev.hsdevPath');
        const dbPath = atom.config.get('atom-haskell-hsdev.hsdevDb');
        const runOpts = [];
        runOpts.push('run');
        if (this.options.port) {
            runOpts.push('--port', this.options.port.toString());
        }
        if (this.options.db) {
            runOpts.push('--db', this.options.db);
        }
        else if (dbPath) {
            runOpts.push('--db', dbPath);
        }
        if (this.options.logFile) {
            runOpts.push('--log', this.options.logFile);
        }
        if (this.options.logLevel) {
            runOpts.push('--log-level', this.options.logLevel);
        }
        this.proc = new interactive_process_1.InteractiveProcess(modPath, runOpts);
        this.proc.onceExit((code) => {
            debug(`hsdev ended with ${code}`);
            this.proc = undefined;
        });
        const { stdout } = await this.proc.readLine();
        debug(`Received line: ${stdout[0]}`);
        const started = /Server started at port (.*)$/.exec(stdout[0]);
        if (started) {
            debug('Started hsdev');
            return this.proc;
        }
        return;
    }
    async connectHsDev() {
        if (this.sock) {
            return this.sock;
        }
        this.id = 0;
        this.sock = new net.Socket();
        this.sock.setEncoding('utf-8');
        this.sock.on('data', (data) => {
            const lines = data.split('\n');
            if (lines.length == 1) {
                this.buffer = this.buffer + (lines.pop() || '');
            }
            else {
                lines[0] = this.buffer + lines[0];
                this.buffer = lines.pop() || '';
            }
            for (const line of lines) {
                debug(`received response: ${line}`);
                const resp = JSON.parse(line);
                const id = resp['id'];
                if (id) {
                    if (this.callbacks[id]) {
                        const { onError, onNotify, onResponse } = this.callbacks[id];
                        if (resp['error'] && onError) {
                            onError(resp['error'], resp);
                            delete this.callbacks[id];
                        }
                        else if (resp['notify'] && onNotify) {
                            onNotify(resp['notify']);
                        }
                        else if (resp['result'] && onResponse) {
                            onResponse(resp['result']);
                            delete this.callbacks[id];
                        }
                    }
                }
            }
        });
        this.sock.connect({ port: 4567 });
        return this.sock;
    }
    async initProcess() {
        const proc = await this.startServer();
        if (!proc) {
            throw 'Error spawning process';
        }
        return this.connectHsDev();
    }
    async call(command, opts = {}, callbacks) {
        debug(`Running hsdev command ${command} with opts: ${opts}`);
        const sock = await this.initProcess();
        if (!sock) {
            throw ('Error getting socket');
        }
        let cmd = opts;
        const id = this.id.toString();
        ++this.id;
        opts['command'] = command;
        opts['no-file'] = true;
        opts['id'] = id;
        return await new Promise((resolve, reject) => {
            const calls = {
                onError: (error, details) => {
                    reject(`Error returned: ${error}`);
                    if (callbacks && callbacks.onError) {
                        callbacks.onError(error, details);
                    }
                },
                onNotify: callbacks ? callbacks.onNotify : undefined,
                onResponse: (response) => {
                    resolve(response);
                    if (callbacks && callbacks.onResponse) {
                        callbacks.onResponse(response);
                    }
                }
            };
            this.callbacks[id] = calls;
            debug(`Sending command: ${JSON.stringify(cmd)}`);
            sock.write(JSON.stringify(cmd) + '\n');
        });
    }
    async ping(callbacks) {
        return await this.call('ping', {}, callbacks);
    }
    async whoat(file, line, column, callbacks) {
        return await this.call('whoat', { 'file': file, 'line': line, 'column': column }, callbacks);
    }
    async whois(file, name, callbacks) {
        return await this.call('whois', { 'file': file, 'name': name }, callbacks);
    }
    async lookup(file, name, callbacks) {
        return await this.call('lookup', { 'file': file, 'name': name }, callbacks);
    }
    async symbol(opts = {
        query: '',
        searchType: 'prefix',
        installed: false,
        sourced: false,
        standalone: false,
        localNames: false,
        header: false
    }, callbacks) {
        const params = {
            'input': opts.query,
            'type': opts.searchType,
            'locals': opts.localNames,
            'header': opts.header,
        };
        const filters = [];
        if (opts.project) {
            filters.push({ 'project': opts.project });
        }
        if (opts.file) {
            filters.push({ 'file': opts.file });
        }
        if (opts.module) {
            filters.push({ 'module': opts.module });
        }
        if (opts.package) {
            filters.push({ 'package': opts.package });
        }
        if (opts.installed) {
            filters.push('installed');
        }
        if (opts.sourced) {
            filters.push('sourced');
        }
        if (opts.standalone) {
            filters.push('standalone');
        }
        params['filters'] = filters;
        return await this.call('symbol', params, callbacks);
    }
    async infer(files, callbacks) {
        return await this.call('infer', { 'projects': [], 'files': files }, callbacks);
    }
    async scanFile(file, callbacks) {
        return await this.call('scan', { 'files': [{ 'file': file, 'contents': null }] }, callbacks);
    }
    async scanCabal(callbacks) {
        return await this.call('scan', { 'cabal': true }, callbacks);
    }
}
exports.HsDevProcessReal = HsDevProcessReal;
//# sourceMappingURL=data:application/json;base64,