"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hsdev_1 = require("./hsdev");
const atom_1 = require("atom");
const completion_backend_1 = require("./completion-backend");
const upi_consumer_1 = require("./upi-consumer");
const util_1 = require("./util");
let process;
let disposables;
let tempDisposables;
let completionBackend;
let resolveUpiPromise;
let upiPromise;
var config_1 = require("./config");
exports.config = config_1.config;
function activate(_state) {
    upiPromise = new Promise((resolve) => resolveUpiPromise = resolve);
    process = new hsdev_1.HsDevProcess(upiPromise);
    disposables = new atom_1.CompositeDisposable();
    tempDisposables = new atom_1.CompositeDisposable();
    disposables.add(tempDisposables);
    tempDisposables.add(process.onError(util_1.defaultErrorHandler), process.onWarning((detail) => {
        atom.notifications.addWarning('hsdev warning', { detail });
    }));
    disposables.add(atom.commands.add('atom-workspace', {
        'atom-haskell-hsdev:shutdown-backend': () => process && process.killProcess(),
    }));
}
exports.activate = activate;
function deactivate() {
    process && process.destroy();
    process = undefined;
    completionBackend = undefined;
    disposables && disposables.dispose();
    disposables = undefined;
    tempDisposables = undefined;
}
exports.deactivate = deactivate;
function provideCompletionBackend() {
    if (!process) {
        return undefined;
    }
    if (!completionBackend) {
        completionBackend = new completion_backend_1.CompletionBackend(process, upiPromise);
    }
    return completionBackend;
}
exports.provideCompletionBackend = provideCompletionBackend;
function consumeUPI(service) {
    if (!process || !disposables) {
        return undefined;
    }
    tempDisposables && tempDisposables.dispose();
    tempDisposables = undefined;
    const upiConsumer = new upi_consumer_1.UPIConsumer(service, process);
    resolveUpiPromise(upiConsumer.upi);
    disposables.add(upiConsumer);
    return upiConsumer;
}
exports.consumeUPI = consumeUPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRvbS1oYXNrZWxsLWhzZGV2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2F0b20taGFza2VsbC1oc2Rldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFzQztBQUN0QywrQkFBMEM7QUFDMUMsNkRBQXdEO0FBQ3hELGlEQUE0QztBQUM1QyxpQ0FBNEM7QUFHNUMsSUFBSSxPQUFpQyxDQUFBO0FBQ3JDLElBQUksV0FBNEMsQ0FBQTtBQUNoRCxJQUFJLGVBQWdELENBQUE7QUFDcEQsSUFBSSxpQkFBZ0QsQ0FBQTtBQUNwRCxJQUFJLGlCQUFnRCxDQUFBO0FBQ3BELElBQUksVUFBcUMsQ0FBQTtBQUV6QyxtQ0FBaUM7QUFBeEIsMEJBQUEsTUFBTSxDQUFBO0FBRWYsa0JBQXlCLE1BQWE7SUFDcEMsVUFBVSxHQUFHLElBQUksT0FBTyxDQUFtQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLENBQUE7SUFDcEYsT0FBTyxHQUFHLElBQUksb0JBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN0QyxXQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO0lBQ3ZDLGVBQWUsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7SUFDM0MsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUVoQyxlQUFlLENBQUMsR0FBRyxDQUNqQixPQUFPLENBQUMsT0FBTyxDQUFDLDBCQUFtQixDQUFDLEVBQ3BDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO0lBQzVELENBQUMsQ0FBQyxDQUNILENBQUE7SUFFRCxXQUFXLENBQUMsR0FBRyxDQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO1FBQ2xDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFO0tBQzlFLENBQUMsQ0FDSCxDQUFBO0FBQ0gsQ0FBQztBQW5CRCw0QkFtQkM7QUFFRDtJQUNFLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDNUIsT0FBTyxHQUFHLFNBQVMsQ0FBQTtJQUNuQixpQkFBaUIsR0FBRyxTQUFTLENBQUE7SUFDN0IsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNwQyxXQUFXLEdBQUcsU0FBUyxDQUFBO0lBQ3ZCLGVBQWUsR0FBRyxTQUFTLENBQUE7QUFDN0IsQ0FBQztBQVBELGdDQU9DO0FBRUQ7SUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsU0FBUyxDQUFBO0lBQUMsQ0FBQztJQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUN2QixpQkFBaUIsR0FBRyxJQUFJLHNDQUFpQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUNoRSxDQUFDO0lBQ0QsTUFBTSxDQUFDLGlCQUFpQixDQUFBO0FBQzFCLENBQUM7QUFORCw0REFNQztBQUVELG9CQUEyQixPQUE2QjtJQUN0RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsU0FBUyxDQUFBO0lBQUMsQ0FBQztJQUNsRCxlQUFlLElBQUksZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzVDLGVBQWUsR0FBRyxTQUFTLENBQUE7SUFDM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUNyRCxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDbEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUM1QixNQUFNLENBQUMsV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFSRCxnQ0FRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhzRGV2UHJvY2VzcyB9IGZyb20gJy4vaHNkZXYnXHJcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xyXG5pbXBvcnQgeyBDb21wbGV0aW9uQmFja2VuZCB9IGZyb20gJy4vY29tcGxldGlvbi1iYWNrZW5kJ1xyXG5pbXBvcnQgeyBVUElDb25zdW1lciB9IGZyb20gJy4vdXBpLWNvbnN1bWVyJ1xyXG5pbXBvcnQgeyBkZWZhdWx0RXJyb3JIYW5kbGVyIH0gZnJvbSAnLi91dGlsJ1xyXG5pbXBvcnQgKiBhcyBVUEkgZnJvbSAnYXRvbS1oYXNrZWxsLXVwaSdcclxuXHJcbmxldCBwcm9jZXNzOiBIc0RldlByb2Nlc3MgfCB1bmRlZmluZWRcclxubGV0IGRpc3Bvc2FibGVzOiBDb21wb3NpdGVEaXNwb3NhYmxlIHwgdW5kZWZpbmVkXHJcbmxldCB0ZW1wRGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgfCB1bmRlZmluZWRcclxubGV0IGNvbXBsZXRpb25CYWNrZW5kOiBDb21wbGV0aW9uQmFja2VuZCB8IHVuZGVmaW5lZFxyXG5sZXQgcmVzb2x2ZVVwaVByb21pc2U6ICh2OiBVUEkuSVVQSUluc3RhbmNlKSA9PiB2b2lkXHJcbmxldCB1cGlQcm9taXNlOiBQcm9taXNlPFVQSS5JVVBJSW5zdGFuY2U+XHJcblxyXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZShfc3RhdGU6IG5ldmVyKSB7XHJcbiAgdXBpUHJvbWlzZSA9IG5ldyBQcm9taXNlPFVQSS5JVVBJSW5zdGFuY2U+KChyZXNvbHZlKSA9PiByZXNvbHZlVXBpUHJvbWlzZSA9IHJlc29sdmUpXHJcbiAgcHJvY2VzcyA9IG5ldyBIc0RldlByb2Nlc3ModXBpUHJvbWlzZSlcclxuICBkaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcclxuICB0ZW1wRGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXHJcbiAgZGlzcG9zYWJsZXMuYWRkKHRlbXBEaXNwb3NhYmxlcylcclxuXHJcbiAgdGVtcERpc3Bvc2FibGVzLmFkZChcclxuICAgIHByb2Nlc3Mub25FcnJvcihkZWZhdWx0RXJyb3JIYW5kbGVyKSxcclxuICAgIHByb2Nlc3Mub25XYXJuaW5nKChkZXRhaWw6IHN0cmluZykgPT4ge1xyXG4gICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZygnaHNkZXYgd2FybmluZycsIHsgZGV0YWlsIH0pXHJcbiAgICB9KSxcclxuICApXHJcblxyXG4gIGRpc3Bvc2FibGVzLmFkZChcclxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcclxuICAgICAgJ2F0b20taGFza2VsbC1oc2RldjpzaHV0ZG93bi1iYWNrZW5kJzogKCkgPT4gcHJvY2VzcyAmJiBwcm9jZXNzLmtpbGxQcm9jZXNzKCksXHJcbiAgICB9KSxcclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWFjdGl2YXRlKCkge1xyXG4gIHByb2Nlc3MgJiYgcHJvY2Vzcy5kZXN0cm95KClcclxuICBwcm9jZXNzID0gdW5kZWZpbmVkXHJcbiAgY29tcGxldGlvbkJhY2tlbmQgPSB1bmRlZmluZWRcclxuICBkaXNwb3NhYmxlcyAmJiBkaXNwb3NhYmxlcy5kaXNwb3NlKClcclxuICBkaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxyXG4gIHRlbXBEaXNwb3NhYmxlcyA9IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUNvbXBsZXRpb25CYWNrZW5kKCkge1xyXG4gIGlmICghcHJvY2VzcykgeyByZXR1cm4gdW5kZWZpbmVkIH1cclxuICBpZiAoIWNvbXBsZXRpb25CYWNrZW5kKSB7XHJcbiAgICBjb21wbGV0aW9uQmFja2VuZCA9IG5ldyBDb21wbGV0aW9uQmFja2VuZChwcm9jZXNzLCB1cGlQcm9taXNlKVxyXG4gIH1cclxuICByZXR1cm4gY29tcGxldGlvbkJhY2tlbmRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVVUEkoc2VydmljZTogVVBJLklVUElSZWdpc3RyYXRpb24pIHtcclxuICBpZiAoIXByb2Nlc3MgfHwgIWRpc3Bvc2FibGVzKSB7IHJldHVybiB1bmRlZmluZWQgfVxyXG4gIHRlbXBEaXNwb3NhYmxlcyAmJiB0ZW1wRGlzcG9zYWJsZXMuZGlzcG9zZSgpXHJcbiAgdGVtcERpc3Bvc2FibGVzID0gdW5kZWZpbmVkXHJcbiAgY29uc3QgdXBpQ29uc3VtZXIgPSBuZXcgVVBJQ29uc3VtZXIoc2VydmljZSwgcHJvY2VzcylcclxuICByZXNvbHZlVXBpUHJvbWlzZSh1cGlDb25zdW1lci51cGkpXHJcbiAgZGlzcG9zYWJsZXMuYWRkKHVwaUNvbnN1bWVyKVxyXG4gIHJldHVybiB1cGlDb25zdW1lclxyXG59XHJcbiJdfQ==